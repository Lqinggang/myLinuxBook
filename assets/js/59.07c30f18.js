(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{449:function(s,a,t){"use strict";t.r(a);var e=t(2),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[s._v("#")]),s._v(" 系统调用")]),s._v(" "),a("p",[s._v("系统调用时通过软中断向内核发起一个明确的请求, 通过向内核发起系统调用实现用户态进程和硬件设置间的大部分接口, 系统调用属于内核")]),s._v(" "),a("h2",{attrs:{id:"系统调用分派表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用分派表"}},[s._v("#")]),s._v(" 系统调用分派表")]),s._v(" "),a("p",[s._v("为了把系统调用号与对应的服务例程关联起来，内核利用了一个系统调用分派表，这个表存放在 sys_call_table 数组中, 如下(以"),a("code",[s._v("_x86_64_")]),s._v("为例)")]),s._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("asmlinkage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sys_call_ptr_t")]),s._v(" sys_call_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("__NR_syscall_max"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n     * Smells like a compiler bug -- it doesn't work\n     * when the & below is removed.\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" __NR_syscall_max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("__x64_sys_ni_syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这里的意思是 [0 - __NR_syscall_max] 下标的数据全部初始化为 &__x64_sys_ni_syscall */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<asm/syscalls_64.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("其中, asm/syscalls_64.h 文件在编译时生成, 生成前内容如下:")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("__SYSCALL(1, sys_write)\n__SYSCALL(2, sys_open)\n__SYSCALL(3, sys_close)\n__SYSCALL(4, sys_newstat)\n__SYSCALL(5, sys_newfstat)\n__SYSCALL(6, sys_newlstat)\n__SYSCALL(7, sys_poll)\n...\n")])])]),a("p",[s._v("生成之后, 内容如下:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[0] = sys_read,\n[1] = sys_write,\n[2] = sys_open,\n[3] = sys_close,\n...\n")])])]),a("p",[s._v("生成之后的系统调用分派表中第 n 个表项包含系统调用号为 n 的服务例程的地址, 如系统调用号 2 对应的是 sys_open 函数,  "),a("code",[s._v("__x64_sys_ni_syscall")]),s._v('是"未实现"系统调用的服务例程, 它返回出错码 -ENOSYS, 所有未实现的系统调用都执行该函数')]),s._v(" "),a("h2",{attrs:{id:"进入系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入系统调用"}},[s._v("#")]),s._v(" 进入系统调用")]),s._v(" "),a("p",[s._v("本地应用可以通过两种不同的方式进入系统调用:")]),s._v(" "),a("h3",{attrs:{id:"执行-int-0x80-i386-结构-syscall-x86-64-架构-汇编指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行-int-0x80-i386-结构-syscall-x86-64-架构-汇编指令"}},[s._v("#")]),s._v(" 执行 int $0x80 (__i386__结构) / syscall (_x86_64_架构)汇编指令")]),s._v(" "),a("p",[s._v("这里的 "),a("code",[s._v("0x80")]),s._v(" 对应的是中断向量表中第 0x80 中断号, 它对应的是 system_call")]),s._v(" "),a("div",{staticClass:"language-asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#define my_syscall3(num, arg1, arg2, arg3)                                    \\\n({                                                                            \\\n    long _ret;                                                            \\\n    register long _num asm("eax") = (num);                                \\\n    register long _arg1 asm("ebx") = (long)(arg1);                        \\\n    register long _arg2 asm("ecx") = (long)(arg2);                        \\\n    register long _arg3 asm("edx") = (long)(arg3);                        \\\n                                          \\\n    asm volatile (                                                        \\\n        "int $0x80\\n"                                                 \\\n        : "=a" (_ret)                                                 \\\n        : "r"(_arg1), "r"(_arg2), "r"(_arg3),                         \\\n          "0"(_num)                                                   \\\n        : "memory", "cc"                                              \\\n    );                                                                    \\\n    _ret;                                                                 \\\n})\n')])])]),a("p",[s._v("如上, 执行"),a("code",[s._v("int $0x80")]),s._v(" 触发系统调用, 其中, "),a("code",[s._v("eax")]),s._v("寄存器保存系统调用号 num 的值, 然后将作为入参传递给 0x80 号中断对应的处理函数 system_call，system_call 函数将从"),a("code",[s._v("eax")]),s._v("寄存器中读取入参, 根据入参得到系统调用号, 并依次调用对应的系统调用函数，而"),a("code",[s._v("ebx")]),s._v(", "),a("code",[s._v("ecx")]),s._v(", "),a("code",[s._v("edx")]),s._v(" 这三个寄存器的值, 将作为系统调用函数的参数")]),s._v(" "),a("h3",{attrs:{id:"执行-sysenter-汇编指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行-sysenter-汇编指令"}},[s._v("#")]),s._v(" 执行 sysenter 汇编指令")])])}),[],!1,null,null,null);a.default=n.exports}}]);